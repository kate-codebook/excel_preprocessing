# -*- coding: utf-8 -*-
"""
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1HrcEuep1qAwqF7nMQLgtg7XSiFvD5Fr9
"""

import pandas as pd 
import re 
# excel_file = open('batch1.xlsx')
f = pd.read_excel('batch1.xlsx', usecols=['Question Intro', 'Question #', 'Sponsor Question', 'FDA Answer','Sponsor Email Response', 'Meeting Discussion', 'Extra Notes 1','Extra Notes 2', 'Extra Notes 3', 'Extra Notes 4'])
df = pd.DataFrame(data = f).fillna('')

#1. question # extraction from Question Intro column 
QI_cells = df['Question Intro'].tolist()
QI_row = 0 
for cell in QI_cells: 
  cell = str(cell)
  if re.search('^[1-9]', cell): 
    QI_cell_content = cell.split('.')
    df.at[QI_row, 'Question Intro'] = '.'.join(QI_cell_content[1:])
    Q_num = QI_cell_content[0]
    df.at[QI_row,'Question #'] = Q_num
  QI_row += 1

#2. extract question # from Sponsor Question column 
SQ_cells = df['Sponsor Question'].tolist()
SQ_row = 0 
for cell in SQ_cells: 
  if re.search('^[a-z]*[\.]', cell): 
    SQ_cell_content = cell.split('.')
    df.at[SQ_row, 'Sponsor Question'] = '.'.join(SQ_cell_content[1:])
    Q_num = SQ_cell_content[0]
    df.at[SQ_row,'Question #'] += Q_num
  elif re.search('^[a-z]*[\)]', cell): 
    SQ_cell_content = cell.split(')')
    df.at[SQ_row, 'Sponsor Question'] = ')'.join(SQ_cell_content[1:])
    Q_num = SQ_cell_content[0]
    df.at[SQ_row,'Question #'] += Q_num
  SQ_row += 1

#3. remove question # from FDA Answer 
FDA_cells = df['FDA Answer'].tolist()
FDA_row = 0 
for cell in FDA_cells: 
  if re.search('^[a-z]*[\)]', cell): 
    FDA_cell_content = cell.split(')')
    df.at[FDA_row, 'FDA Answer'] = ')'.join(SQ_cell_content[1:])
  elif re.search('^[a-z]*[\.]', cell): 
    FDA_cell_content = cell.split('.')
    df.at[FDA_row, 'FDA Answer'] = '.'.join(SQ_cell_content[1:])
  FDA_row += 1

# #4. assign question # to continuous FDA answer ex. 1a, b, c => 1a, 1b, 1c 
# import string 
# alphabet_list = list(string.ascii_lowercase)
# cells = df['Question #'].tolist()
# row = 0 
# for cell in cells:
#   if re.search('^[1-9][a-z]$', cell):
#     Q_num = cell[:-1]
#     Q_char = cell[-1]
#     Q_char_index = alphabet_list.index(Q_char)
#     next_row = row + 1
#     while next_row < len(cells) and df.at[next_row, 'Question #'] == alphabet_list[Q_char_index + 1]:
#       df.at[next_row, 'Question #'] = Q_num + df.at[next_row, 'Question #']
#       next_row += 1
#   row += 1

#5. yellow highlight for _____ containing cell
df = (df.style.applymap(lambda v: 'background-color: %s' % 'yellow' if re.search('_{3}', v) else ''))
# styled.to_excel('styled.xlsx', engine='openpyxl')

#bullet point

df.head()

#6. red highlight for empty cells in the “FDA Answer”

exception = ['FDA', 'NDA', 'e-NDA', 'CTD']
def highlight_cell(value): 
  if value == "-" or value == "": 
    color = 'red'
  elif re.search('__+', value): 
    color = 'yellow'
  elif re.search('[A-Z]+[0-9]', value): #study name sample: CDP870-031, D2304
    color = 'green'
  elif re.search('[A-Z][A-Z][A-Z]*', value): 
    color = 'orange'
  else: 
    color = 'white' 
  return 'background-color: %s' % color

styledf = df.style.applymap(highlight_cell)
# df = pd.DataFrame(df['FDA Answer']).style.applymap(lambda v: 'background-color: %s' % 'red' if v == "-" or v == "" else '' )
# .style.applymap(lambda v: 'background-color: %s' % 'green' if re.search('^[CDP]', v) else '')
# https://mode.com/example-gallery/python_dataframe_styling/
styledf

#test
def highlight_cell_v1(value): 
  if value == "-" or value == "": 
    color = 'red'
  elif re.search('__+', value): 
    color = 'yellow'
  elif re.search('[A-Z]+[0-9]', value): #study name sample: CDP870-031, D2304
    color = 'green'
  elif re.search('[A-Z][A-Z][A-Z]*', value): 
    color = 'orange'
  else: 
    color = 'white' 
  return 'background-color: %s' % color

def highlight_cell_v2(value): 
  if re.search('__+', value): 
    color = 'yellow'
  elif re.search('[A-Z]+[0-9]', value): #study name sample: CDP870-031, D2304
    color = 'green'
  elif re.search('[A-Z][A-Z][A-Z]*', value): 
    color = 'orange'
  else: 
    color = 'white' 
  return 'background-color: %s' % color

def highlight(x): 
  df = x.copy()
  df['FDA Answer']

styledf = df.style.apply(highlight_cell())
# df = pd.DataFrame(df['FDA Answer']).style.applymap(lambda v: 'background-color: %s' % 'red' if v == "-" or v == "" else '' )
# .style.applymap(lambda v: 'background-color: %s' % 'green' if re.search('^[CDP]', v) else '')
# https://mode.com/example-gallery/python_dataframe_styling/

import pandas as pd
import numpy as np

data =  pd.DataFrame(np.random.randn(5, 3), columns=list('ABC'))
#print (data)

def highlight_cols(x):
    #copy df to new - original data are not changed
    df = x.copy()
    #select all values to default value - red color
    df.loc[:,:] = 'background-color: red'
    #overwrite values grey color
    df[['B','C']] = 'background-color: grey'
    #return color df
    return df    

data.style.apply(highlight_cols, axis=None)

#6. Answer masked

#7. product name containing cell, highlight in green